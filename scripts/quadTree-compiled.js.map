{"version":3,"sources":["quadTree.js"],"names":[],"mappings":"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","file":"quadTree-compiled.js","sourcesContent":["/**\r\n * Created by xaleth on 6/12/2016.\r\n * implemented based on java code in\r\n * 'Quick Tip: Use Quadtrees to Detect Likely Collisions in 2D Space'\r\n *                        by Steven Lambert\r\n * @ http://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374\r\n *\r\n * transpiled into javascript by Roberto Garza\r\n */\r\nconst MAX_OBJECTS = 4;\r\nconst MAX_LEVELS = 10;\r\n\r\nclass QuadTree{\r\n\r\n    constructor(lvl, screenBounds){\r\n        this.level = lvl;         //current depth of quadTree\r\n        this.objects = [];        //objects within the region/subregion\r\n        this.nodes = []; //4 child nodes, which are subregions of the parent\r\n        this.bounds = {           //rectangle that bounds the subregion of screen\r\n            x:      screenBounds.x,\r\n            y:      screenBounds.y,\r\n            width:  screenBounds.width,\r\n            height: screenBounds.height\r\n        };\r\n    }\r\n\r\n    split(){\r\n        let subWidth =  (this.bounds.width  / 2) | 0;\r\n        let subHeight = (this.bounds.height / 2) | 0;\r\n\r\n        let tmpX = this.bounds.x;\r\n        let tmpY = this.bounds.y;\r\n\r\n        this.nodes[0] = new QuadTree(this.level+1, {x:tmpX+subWidth, y:tmpY,           width:subWidth, height:subHeight} )\r\n        this.nodes[1] = new QuadTree(this.level+1, {x:tmpX,          y:tmpY,           width:subWidth, height:subHeight} )\r\n        this.nodes[2] = new QuadTree(this.level+1, {x:tmpX,          y:tmpY+subHeight, width:subWidth, height:subHeight} )\r\n        this.nodes[3] = new QuadTree(this.level+1, {x:tmpX+subWidth, y:tmpY+subHeight, width:subWidth, height:subHeight} )\r\n    }\r\n\r\n\r\n    //insert the object into the quadtree. if the node\r\n    //exceeds the capacity, it will split and add all objects to\r\n    //their corresponding nodes\r\n    insert(objBounds){\r\n        if(this.nodes[0] != null){\r\n            let index = this.getIndex(objBounds);\r\n\r\n            if(index != -1){\r\n                this.nodes[index].insert(objBounds);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.objects.push(objBounds);\r\n\r\n        if( this.objects.length > MAX_OBJECTS && this.level < MAX_LEVELS ){\r\n            if( this.nodes[0] == null ){\r\n                this.split();\r\n            }\r\n\r\n            let i = 0;\r\n            while( i < this.objects.length){\r\n                let obj = this.objects[i];\r\n                let index = this.getIndex(obj);\r\n                if(index != -1){\r\n                    let removedObj = this.objects.splice(this.objects.indexOf(obj),1);\r\n                    this.nodes[index].insert(removedObj[0]);\r\n                }else{\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //return all objects that could collide with the given object\r\n    retrieve(objBounds){\r\n        let index = this.getIndex(objBounds);\r\n        let returnObjs = this.objects;\r\n\r\n        if(this.nodes[0] != null) {\r\n\r\n            if (index != -1) {\r\n                returnObjs = returnObjs.concat(this.nodes[index].retrieve(objBounds));\r\n            } else {\r\n                for (let node of this.nodes) {\r\n                    returnObjs = returnObjs.concat(node.retrieve(objBounds));\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return returnObjs;\r\n\r\n    }\r\n\r\n    getIndex(objBounds){\r\n        let index = -1;\r\n        let vertMid = this.bounds.x + (this.bounds.width/2);\r\n        let horzMid = this.bounds.y + (this.bounds.height/2)\r\n\r\n        //Obj fits in top Quadrants\r\n        let topQuad = (objBounds.y < horzMid && objBounds.y + objBounds.height < horzMid);\r\n        //Obj fits in bot Quadrants\r\n        let botQuad = (objBounds.y > horzMid);\r\n\r\n\r\n\r\n        //Obj fits in left Quadrants\r\n        if( objBounds.x < vertMid && objBounds.x + objBounds.width < vertMid ){\r\n            if(topQuad){\r\n                index = 1;\r\n            }else if(botQuad){\r\n                index = 2;\r\n            }\r\n        }\r\n        //Obj fits in right quads\r\n        else if( objBounds.x > vertMid ){\r\n            if(topQuad){\r\n                index = 0;\r\n            }else if(botQuad){\r\n                index = 3;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    clear(){\r\n        this.objects = [];\r\n        for(let node of this.nodes){\r\n            node.clear();\r\n            node = null;\r\n        }\r\n\r\n        this.nodes = [];\r\n    }\r\n\r\n    print(){\r\n        let str = this.level+\": \";\r\n        for(let obj of this.objects){\r\n            str += obj.name+ \" \";\r\n        }\r\n\r\n        console.log(str);\r\n\r\n        for(let i = 0; i < 4; i++){\r\n            if(this.nodes[i] != null){\r\n                this.nodes[i].print();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Debugging/Visual function to show which level of the\r\n    //QuadTree a certain object belongs in\r\n    paint(){\r\n        var color;\r\n        switch(this.level) {\r\n            case 0:\r\n                color = \"red\";\r\n                break;\r\n            case 1:\r\n                color = \"green\";\r\n                break;\r\n            case 2:\r\n                color = \"purple\";\r\n                break;\r\n            case 3:\r\n                color = \"blue\";\r\n                break;\r\n            case 4:\r\n                color = \"yellow\";\r\n                break;\r\n            case 5:\r\n                color = \"orange\";\r\n                break;\r\n            default:\r\n\r\n        }\r\n\r\n        for(let obj of this.objects){\r\n            obj.color = color;\r\n            obj.draw();\r\n        }\r\n\r\n        for(let i = 0; i < 4; i++){\r\n            if(this.nodes[i] != null){\r\n                this.nodes[i].paint();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Debugging/Visual function to show where the screen bounds are\r\n    //for each level and it's nodes at each iteration\r\n    draw(canvas, ctx){\r\n        var color;\r\n        switch(this.level) {\r\n            case 0:\r\n                color = \"red\";\r\n                break;\r\n            case 1:\r\n                color = \"green\";\r\n                break;\r\n            case 2:\r\n                color = \"purple\";\r\n                break;\r\n            case 3:\r\n                color = \"blue\";\r\n                break;\r\n            case 4:\r\n                color = \"yellow\";\r\n                break;\r\n            case 5:\r\n                color = \"orange\";\r\n                break;\r\n            default:\r\n\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = \"4\";\r\n        ctx.stroke();\r\n\r\n        for(let i = 0; i < 4; i++){\r\n            if(this.nodes[i] != null){\r\n                this.nodes[i].draw(canvas,ctx);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}